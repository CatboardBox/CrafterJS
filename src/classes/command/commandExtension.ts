import { IFunctionRef } from "../../schema";
import { McFunction } from "../mcFunction";
import { Namespace, NestedNamespace, RootNamespace } from "../namespace";
import { CommandInstance } from "./commandInstance";

// used for deduplicating auto generated functions
const CachedAutogeneratedFunctions: Record<
  string,
  Record<string, IFunctionRef>
> = {};
let autoGenCount = 0;
const namespaceMap = new Map<RootNamespace, Namespace>();

export function asInlineFunction(
  command: CommandInstance,
  sourceNamespace: Namespace
): IFunctionRef {
  if (!namespaceMap.has(sourceNamespace.rootNamespace)) {
    namespaceMap.set(
      sourceNamespace.rootNamespace,
      new NestedNamespace(
        "autoGeneratedFunctions",
        sourceNamespace.rootNamespace
      )
    );
  }
  const namespace = namespaceMap.get(sourceNamespace.rootNamespace)!;
  CachedAutogeneratedFunctions[namespace.namespacePath] =
    CachedAutogeneratedFunctions[namespace.namespacePath] || {};
  //replace all spaces with __
  const hash = command.command.replace(/ /g, "__");
  if (!CachedAutogeneratedFunctions[namespace.namespacePath][hash]) {
    const fn = new McFunction({
      namespace,
      name: "AutoGeneratedFunction" + autoGenCount++,
      buildPriority: 5,
    });
    fn.addComment("autogenerated");
    fn.addCommand(command);
    CachedAutogeneratedFunctions[namespace.namespacePath][hash] = fn.ref;
  }
  return CachedAutogeneratedFunctions[namespace.namespacePath][hash];
}
